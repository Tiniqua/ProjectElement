// Fill out your copyright notice in the Description page of Project Settings.

#include "SListDataTypePin.h"
#include "TypeToolbox/DataType/DataTypeProperties.h"
#include "TypeToolboxEditor/Utility/TypeToolboxUtils.h"

void SListDataTypePin::Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj)
{
	SListStructTypePin::FArguments Args = SListStructTypePin::FArguments();
	Args.StructViewerFilter(MakeShared<FDataTypeBaseStructFilter>());
	SListStructTypePin::Construct(Args, InGraphPinObj);
}

FText SListDataTypePin::GetComboTextValue() const
{
	if (GraphPinObj->GetDefaultAsString().IsEmpty())
	{
		return FText::FromString("None");
	}

	FDataTypeSelector Result;
	FDataTypeSelector::StaticStruct()->ImportText(*GraphPinObj->GetDefaultAsString(), &Result, nullptr, EPropertyPortFlags::PPF_None, GLog, FDataTypeSelector::StaticStruct()->GetName());

	if (!Result.SelectedStructType)
	{
		return FText::FromString("None");
	}
	
	return FText::FromString(Result.SelectedStructType->GetName());
}

void SListDataTypePin::OnStructPicked(const UScriptStruct* PickedStruct) const
{
	SListStructTypePin::OnStructPicked(PickedStruct);
	
	if (!PickedStruct)
	{
		GraphPinObj->GetSchema()->ResetPinToAutogeneratedDefaultValue(GraphPinObj);
		return;
	}

	FString ValueString;
	FDataTypeSelector NewPickedStruct;
	NewPickedStruct.SelectedStructType = const_cast<UScriptStruct*>(PickedStruct);
	FDataTypeSelector::StaticStruct()->ExportText(ValueString, &NewPickedStruct, nullptr, nullptr, EPropertyPortFlags::PPF_None, nullptr);
	GraphPinObj->GetSchema()->TrySetDefaultValue(*GraphPinObj, ValueString);
}