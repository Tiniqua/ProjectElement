// Fill out your copyright notice in the Description page of Project Settings.

#include "SDataTypeSelectorPin.h"
#include "TypeToolbox/DataType/BaseDataType.h"
#include "TypeToolboxEditor/UI/Widgets/SDataTypeComboBox.h"

void SDataTypeSelectorPin::Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj)
{
	SelectedDataTypeStruct = InArgs._SelectedStructType;
	SGraphPin::Construct(SGraphPin::FArguments(), InGraphPinObj);
}

TSharedRef<SWidget> SDataTypeSelectorPin::GetLabelWidget(const FName& InLabelStyle)
{
	return SNew(STextBlock)
	.Text(this, &SDataTypeSelectorPin::GetLabelText)
	.TextStyle(FAppStyle::Get(), InLabelStyle)
	.ColorAndOpacity(FLinearColor::White)
	.Visibility(this, &SDataTypeSelectorPin::GetPinLabelCustomVisibility);
}

FText SDataTypeSelectorPin::GetLabelText() const
{
	const UEdGraphPin* GraphPin = GetPinObj();
	if (GraphPin && !GraphPin->IsPendingKill())
	{
		if (const UEdGraphNode* GraphNode = GraphPin->GetOwningNodeUnchecked())
		{
			return GraphNode->GetPinDisplayName(GraphPin);
		}
	}
	
	return FText::GetEmpty();
}

TSharedRef<SWidget> SDataTypeSelectorPin::GetDefaultValueWidget()
{
	const FDataTypeBase CurrentValue = GetCurrentDataTypeValue();
	SAssignNew(DataTypeComboButton, SDataTypeComboBox)
	.Visibility(this, &SDataTypeSelectorPin::GetComboBoxVisibility)
	.ToolTipText(FText::FromString("Select a Data Type row name from the list."))
	.ContentPadding(FMargin(2,2,2,2))
	.MenuPlacement(MenuPlacement_BelowAnchor)
	.InitialSelectedRowName(CurrentValue.RowNameAsString())
	.DataTypeStaticStruct(SelectedDataTypeStruct)
	.ButtonContentText(this, &SDataTypeSelectorPin::GetDataValueComboTextValue)
	.OnDataTypeSelected(this, &SDataTypeSelectorPin::DataTypeSelected);

	return DataTypeComboButton.ToSharedRef();
}

EVisibility SDataTypeSelectorPin::GetComboBoxVisibility() const
{
	if (ShouldShowDefaultWidget())
	{
		if (PinImage->GetVisibility() != EVisibility::Visible)
		{
			PinImage->SetVisibility(EVisibility::Visible);
		}
		
		return EVisibility::Collapsed;
	}

	if (PinImage->GetVisibility() != EVisibility::Collapsed)
	{
		PinImage->SetVisibility(EVisibility::Collapsed);
	}
	
	return EVisibility::Visible;
}

EVisibility SDataTypeSelectorPin::GetPinLabelCustomVisibility() const
{
	if (ShouldShowDefaultWidget())
	{
		return EVisibility::Visible;
	}
	
	return EVisibility::Collapsed;
}

bool SDataTypeSelectorPin::ShouldShowDefaultWidget() const
{
	if (GraphPinObj->Direction == EGPD_Output ||
		GraphPinObj->HasAnyConnections())
	{
		return true;
	}

	// Show default pin if the owning node is a break node...
	if (const UEdGraphNode* OwningNode = GetPinObj()->GetOwningNode())
	{
		if (OwningNode->GetNodeTitle(ENodeTitleType::Type::FullTitle).ToString().Contains("Break"))
		{
			return true;
		}
	}
	
	return false;
}

FText SDataTypeSelectorPin::GetDataValueComboTextValue() const
{
	const FDataTypeBase CurrentValue = GetCurrentDataTypeValue();

	// Is it empty?
	if (!CurrentValue.IsValid(EDataTypeValid::NotEmpty))
	{
		return FText::FromString("None");
	}

	// Is it valid within data base.
	if (!CurrentValue.IsValid(EDataTypeValid::ExistsInDataBase))
	{
		return FText::FromString(CurrentValue.RowName.ToString() + " (invalid)");
	}
	
	return FText::FromName(CurrentValue.RowName);
}

FDataTypeBase SDataTypeSelectorPin::GetCurrentDataTypeValue() const
{
	FDataTypeBase Result;
	FDataTypeBase::StaticStruct()->ImportText(*GraphPinObj->GetDefaultAsString(), &Result, nullptr, EPropertyPortFlags::PPF_None, GLog, FDataTypeBase::StaticStruct()->GetName());
	return Result;
}

void SDataTypeSelectorPin::ClearDataTypeValue() const
{
	FString ValueString;
	const FDataTypeBase NewDataType;
	FDataTypeBase::StaticStruct()->ExportText(ValueString, &NewDataType, nullptr, nullptr, EPropertyPortFlags::PPF_None, nullptr);
	GraphPinObj->GetSchema()->TrySetDefaultValue(*GraphPinObj, ValueString);
}

void SDataTypeSelectorPin::DataTypeSelected(const FDataTypeBase SelectedDataType, const FString SelectedRowName) const
{
	if (SelectedRowName == "None")
	{
		GraphPinObj->GetSchema()->ResetPinToAutogeneratedDefaultValue(GraphPinObj);
		return;
	}
	
	FString ValueString;
	FDataTypeBase::StaticStruct()->ExportText(ValueString, &SelectedDataType, nullptr, nullptr, EPropertyPortFlags::PPF_None, nullptr);
	GraphPinObj->GetSchema()->TrySetDefaultValue(*GraphPinObj, ValueString);
}